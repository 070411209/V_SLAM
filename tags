!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Estimator	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^Estimator::Estimator(): f_manager{Rs}$/;"	f	class:Estimator	signature:()
Estimator::Estimator	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^Estimator::Estimator(): f_manager{Rs}$/;"	f	class:Estimator	signature:()
Estimator::clearState	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^void Estimator::clearState()$/;"	f	class:Estimator	signature:()
Estimator::double2vector	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^void Estimator::double2vector()$/;"	f	class:Estimator	signature:()
Estimator::failureDetection	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^bool Estimator::failureDetection()$/;"	f	class:Estimator	signature:()
Estimator::initialStructure	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^bool Estimator::initialStructure()$/;"	f	class:Estimator	signature:()
Estimator::optimization	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^void Estimator::optimization()$/;"	f	class:Estimator	signature:()
Estimator::processIMU	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^void Estimator::processIMU(double dt, const Vector3d &linear_acceleration, const Vector3d &angular_velocity)$/;"	f	class:Estimator	signature:(double dt, const Vector3d &linear_acceleration, const Vector3d &angular_velocity)
Estimator::processImage	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^void Estimator::processImage(const map<int, vector<pair<int, Eigen::Matrix<double, 7, 1>>>> &image, const std_msgs::Header &header)$/;"	f	class:Estimator	signature:(const map<int, vector<pair<int, Eigen::Matrix<double, 7, 1>>>> &image, const std_msgs::Header &header)
Estimator::relativePose	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^bool Estimator::relativePose(Matrix3d &relative_R, Vector3d &relative_T, int &l)$/;"	f	class:Estimator	signature:(Matrix3d &relative_R, Vector3d &relative_T, int &l)
Estimator::setParameter	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^void Estimator::setParameter()$/;"	f	class:Estimator	signature:()
Estimator::setReloFrame	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^void Estimator::setReloFrame(double _frame_stamp, int _frame_index, vector<Vector3d> &_match_points, Vector3d _relo_t, Matrix3d _relo_r)$/;"	f	class:Estimator	signature:(double _frame_stamp, int _frame_index, vector<Vector3d> &_match_points, Vector3d _relo_t, Matrix3d _relo_r)
Estimator::slideWindow	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^void Estimator::slideWindow()$/;"	f	class:Estimator	signature:()
Estimator::slideWindowNew	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^void Estimator::slideWindowNew()$/;"	f	class:Estimator	signature:()
Estimator::slideWindowOld	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^void Estimator::slideWindowOld()$/;"	f	class:Estimator	signature:()
Estimator::solveOdometry	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^void Estimator::solveOdometry()$/;"	f	class:Estimator	signature:()
Estimator::vector2double	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^void Estimator::vector2double()$/;"	f	class:Estimator	signature:()
Estimator::visualInitialAlign	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^bool Estimator::visualInitialAlign()$/;"	f	class:Estimator	signature:()
FeatureManager	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^FeatureManager::FeatureManager(Matrix3d _Rs[])$/;"	f	class:FeatureManager	signature:(Matrix3d _Rs[])
FeatureManager::FeatureManager	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^FeatureManager::FeatureManager(Matrix3d _Rs[])$/;"	f	class:FeatureManager	signature:(Matrix3d _Rs[])
FeatureManager::addFeatureCheckParallax	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^bool FeatureManager::addFeatureCheckParallax(int frame_count, const map<int, vector<pair<int, Eigen::Matrix<double, 7, 1>>>> &image, double td)$/;"	f	class:FeatureManager	signature:(int frame_count, const map<int, vector<pair<int, Eigen::Matrix<double, 7, 1>>>> &image, double td)
FeatureManager::clearDepth	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^void FeatureManager::clearDepth(const VectorXd &x)$/;"	f	class:FeatureManager	signature:(const VectorXd &x)
FeatureManager::clearState	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^void FeatureManager::clearState()$/;"	f	class:FeatureManager	signature:()
FeatureManager::compensatedParallax2	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^double FeatureManager::compensatedParallax2(const FeaturePerId &it_per_id, int frame_count)$/;"	f	class:FeatureManager	signature:(const FeaturePerId &it_per_id, int frame_count)
FeatureManager::debugShow	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^void FeatureManager::debugShow()$/;"	f	class:FeatureManager	signature:()
FeatureManager::getCorresponding	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^vector<pair<Vector3d, Vector3d>> FeatureManager::getCorresponding(int frame_count_l, int frame_count_r)$/;"	f	class:FeatureManager	signature:(int frame_count_l, int frame_count_r)
FeatureManager::getDepthVector	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^VectorXd FeatureManager::getDepthVector()$/;"	f	class:FeatureManager	signature:()
FeatureManager::getFeatureCount	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^int FeatureManager::getFeatureCount()$/;"	f	class:FeatureManager	signature:()
FeatureManager::removeBack	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^void FeatureManager::removeBack()$/;"	f	class:FeatureManager	signature:()
FeatureManager::removeBackShiftDepth	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^void FeatureManager::removeBackShiftDepth(Eigen::Matrix3d marg_R, Eigen::Vector3d marg_P, Eigen::Matrix3d new_R, Eigen::Vector3d new_P)$/;"	f	class:FeatureManager	signature:(Eigen::Matrix3d marg_R, Eigen::Vector3d marg_P, Eigen::Matrix3d new_R, Eigen::Vector3d new_P)
FeatureManager::removeFailures	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^void FeatureManager::removeFailures()$/;"	f	class:FeatureManager	signature:()
FeatureManager::removeFront	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^void FeatureManager::removeFront(int frame_count)$/;"	f	class:FeatureManager	signature:(int frame_count)
FeatureManager::removeOutlier	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^void FeatureManager::removeOutlier()$/;"	f	class:FeatureManager	signature:()
FeatureManager::setDepth	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^void FeatureManager::setDepth(const VectorXd &x)$/;"	f	class:FeatureManager	signature:(const VectorXd &x)
FeatureManager::setRic	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^void FeatureManager::setRic(Matrix3d _ric[])$/;"	f	class:FeatureManager	signature:(Matrix3d _ric[])
FeatureManager::triangulate	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^void FeatureManager::triangulate(Vector3d Ps[], Vector3d tic[], Matrix3d ric[])$/;"	f	class:FeatureManager	signature:(Vector3d Ps[], Vector3d tic[], Matrix3d ric[])
FeaturePerId::endFrame	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^int FeaturePerId::endFrame()$/;"	f	class:FeaturePerId	signature:()
acc_0	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^Eigen::Vector3d acc_0;$/;"	v
addFeatureCheckParallax	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^bool FeatureManager::addFeatureCheckParallax(int frame_count, const map<int, vector<pair<int, Eigen::Matrix<double, 7, 1>>>> &image, double td)$/;"	f	class:FeatureManager	signature:(int frame_count, const map<int, vector<pair<int, Eigen::Matrix<double, 7, 1>>>> &image, double td)
clearDepth	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^void FeatureManager::clearDepth(const VectorXd &x)$/;"	f	class:FeatureManager	signature:(const VectorXd &x)
clearState	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^void Estimator::clearState()$/;"	f	class:Estimator	signature:()
clearState	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^void FeatureManager::clearState()$/;"	f	class:FeatureManager	signature:()
compensatedParallax2	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^double FeatureManager::compensatedParallax2(const FeaturePerId &it_per_id, int frame_count)$/;"	f	class:FeatureManager	signature:(const FeaturePerId &it_per_id, int frame_count)
con	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^std::condition_variable con;$/;"	v
current_time	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^double current_time = -1;$/;"	v
debugShow	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^void FeatureManager::debugShow()$/;"	f	class:FeatureManager	signature:()
double2vector	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^void Estimator::double2vector()$/;"	f	class:Estimator	signature:()
endFrame	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^int FeaturePerId::endFrame()$/;"	f	class:FeaturePerId	signature:()
estimator	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^Esimator estimator;  \/\/构造函数初始化一些参数为  单位矩阵，零矩阵，或者零$/;"	v
failureDetection	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^bool Estimator::failureDetection()$/;"	f	class:Estimator	signature:()
feature_buf	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^queue<sensor_msgs::PointCloudConstPtr> feature_buf;$/;"	v
feature_callback	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^void feature_callback(const sensor_msgs::PointCloudConstPtr &feature_msg)$/;"	f	signature:(const sensor_msgs::PointCloudConstPtr &feature_msg)
getCorresponding	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^vector<pair<Vector3d, Vector3d>> FeatureManager::getCorresponding(int frame_count_l, int frame_count_r)$/;"	f	class:FeatureManager	signature:(int frame_count_l, int frame_count_r)
getDepthVector	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^VectorXd FeatureManager::getDepthVector()$/;"	f	class:FeatureManager	signature:()
getFeatureCount	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^int FeatureManager::getFeatureCount()$/;"	f	class:FeatureManager	signature:()
getMeasurements	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^getMeasurements()$/;"	f	signature:()
gyr_0	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^Eigen::Vector3d gyr_0;$/;"	v
i_buf	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^std::mutex i_buf;$/;"	v
imu_buf	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^queue<sensor_msgs::ImuConstPtr> imu_buf;$/;"	v
imu_callback	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^void imu_callback(const sensor_msgs::ImuConstPtr &imu_msg)$/;"	f	signature:(const sensor_msgs::ImuConstPtr &imu_msg)
init_feature	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^bool init_feature = 0;$/;"	v
init_imu	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^bool init_imu = 1;$/;"	v
initialStructure	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^bool Estimator::initialStructure()$/;"	f	class:Estimator	signature:()
last_imu_t	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^double last_imu_t = 0;$/;"	v
latest_time	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^double latest_time;$/;"	v
m_buf	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^std::mutex m_buf;$/;"	v
m_estimator	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^std::mutex m_estimator;$/;"	v
m_state	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^std::mutex m_state;$/;"	v
optimization	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^void Estimator::optimization()$/;"	f	class:Estimator	signature:()
predict	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^void predict(const sensor_msgs::ImuConstPtr &imu_msg)$/;"	f	signature:(const sensor_msgs::ImuConstPtr &imu_msg)
process	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^void process()$/;"	f	signature:()
processIMU	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^void Estimator::processIMU(double dt, const Vector3d &linear_acceleration, const Vector3d &angular_velocity)$/;"	f	class:Estimator	signature:(double dt, const Vector3d &linear_acceleration, const Vector3d &angular_velocity)
processImage	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^void Estimator::processImage(const map<int, vector<pair<int, Eigen::Matrix<double, 7, 1>>>> &image, const std_msgs::Header &header)$/;"	f	class:Estimator	signature:(const map<int, vector<pair<int, Eigen::Matrix<double, 7, 1>>>> &image, const std_msgs::Header &header)
relativePose	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^bool Estimator::relativePose(Matrix3d &relative_R, Vector3d &relative_T, int &l)$/;"	f	class:Estimator	signature:(Matrix3d &relative_R, Vector3d &relative_T, int &l)
relo_buf	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^queue<sensor_msgs::PointCloudConstPtr> relo_buf;$/;"	v
relocalization_callback	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^void relocalization_callback(const sensor_msgs::PointCloudConstPtr &points_msg)$/;"	f	signature:(const sensor_msgs::PointCloudConstPtr &points_msg)
removeBack	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^void FeatureManager::removeBack()$/;"	f	class:FeatureManager	signature:()
removeBackShiftDepth	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^void FeatureManager::removeBackShiftDepth(Eigen::Matrix3d marg_R, Eigen::Vector3d marg_P, Eigen::Matrix3d new_R, Eigen::Vector3d new_P)$/;"	f	class:FeatureManager	signature:(Eigen::Matrix3d marg_R, Eigen::Vector3d marg_P, Eigen::Matrix3d new_R, Eigen::Vector3d new_P)
removeFailures	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^void FeatureManager::removeFailures()$/;"	f	class:FeatureManager	signature:()
removeFront	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^void FeatureManager::removeFront(int frame_count)$/;"	f	class:FeatureManager	signature:(int frame_count)
removeOutlier	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^void FeatureManager::removeOutlier()$/;"	f	class:FeatureManager	signature:()
restart_callback	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^void restart_callback(const std_msgs::BoolConstPtr &restart_msg)$/;"	f	signature:(const std_msgs::BoolConstPtr &restart_msg)
setDepth	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^void FeatureManager::setDepth(const VectorXd &x)$/;"	f	class:FeatureManager	signature:(const VectorXd &x)
setParameter	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^void Estimator::setParameter()$/;"	f	class:Estimator	signature:()
setReloFrame	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^void Estimator::setReloFrame(double _frame_stamp, int _frame_index, vector<Vector3d> &_match_points, Vector3d _relo_t, Matrix3d _relo_r)$/;"	f	class:Estimator	signature:(double _frame_stamp, int _frame_index, vector<Vector3d> &_match_points, Vector3d _relo_t, Matrix3d _relo_r)
setRic	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^void FeatureManager::setRic(Matrix3d _ric[])$/;"	f	class:FeatureManager	signature:(Matrix3d _ric[])
slideWindow	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^void Estimator::slideWindow()$/;"	f	class:Estimator	signature:()
slideWindowNew	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^void Estimator::slideWindowNew()$/;"	f	class:Estimator	signature:()
slideWindowOld	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^void Estimator::slideWindowOld()$/;"	f	class:Estimator	signature:()
solveOdometry	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^void Estimator::solveOdometry()$/;"	f	class:Estimator	signature:()
sum_of_wait	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^int sum_of_wait = 0;$/;"	v
tmp_Ba	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^Eigen::Vector3d tmp_Ba;$/;"	v
tmp_Bg	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^Eigen::Vector3d tmp_Bg;$/;"	v
tmp_P	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^Eigen::Vector3d tmp_P;$/;"	v
tmp_Q	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^Eigen::Quaterniond tmp_Q;$/;"	v
tmp_V	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^Eigen::Vector3d tmp_V;$/;"	v
triangulate	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/feature_manager.cpp	/^void FeatureManager::triangulate(Vector3d Ps[], Vector3d tic[], Matrix3d ric[])$/;"	f	class:FeatureManager	signature:(Vector3d Ps[], Vector3d tic[], Matrix3d ric[])
update	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator_node.cpp	/^void update()$/;"	f	signature:()
vector2double	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^void Estimator::vector2double()$/;"	f	class:Estimator	signature:()
visualInitialAlign	/home/kali/kaka/MyGithub/V_SLAM/VINS-Mono/vins_estimator/src/estimator.cpp	/^bool Estimator::visualInitialAlign()$/;"	f	class:Estimator	signature:()
